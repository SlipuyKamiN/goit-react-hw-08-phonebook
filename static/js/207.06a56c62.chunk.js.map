{"version":3,"file":"static/js/207.06a56c62.chunk.js","mappings":"iOAEaA,EAAOC,EAAAA,EAAAA,KAAH,oDAIJC,EAAQD,EAAAA,EAAAA,MAAH,sBAELE,EAAiBF,EAAAA,EAAAA,OAAH,sB,2DCDdG,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,eAEXC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,KAAMF,EAAAA,KAEHG,QACC,yHACA,0IAEDC,WACHC,MAAOL,EAAAA,KAEJG,QAAQ,yCAA0C,sBAClDC,WACHE,SAAUN,EAAAA,KAEPI,SAAS,yBACTG,IAAI,EAAG,wDAGZ,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAYX,KALtBY,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MAUF,OACE,UAACrB,EAAD,CAAMsB,aAAa,MAAMC,SAAUH,GALZ,SAAC,GAA+B,IAA7BV,EAA4B,EAA5BA,KAAMG,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACvCT,GAASmB,EAAAA,EAAAA,IAAc,CAAEd,KAAAA,EAAMG,MAAAA,EAAOC,SAAAA,KACtCO,EAAM,CAAEX,KAAM,GAAIG,MAAO,GAAIC,SAAU,IACxC,IAEC,WACE,SAACZ,GAAD,QAAOuB,KAAK,QAAWN,EAAS,WAChC,SAACjB,GAAD,QAAOuB,KAAK,SAAYN,EAAS,YACjC,SAACjB,GAAD,QAAOuB,KAAK,YAAeN,EAAS,eACpC,SAAChB,EAAD,CAAgBsB,KAAK,SAArB,SAA8B,YAGnC,ECxCD,EAPiB,WACf,OACE,+BACE,SAACrB,EAAD,KAGL,C","sources":["components/RegisterForm/RegisterForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/Register/Register.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  border: 1px solid black;\n`;\n\nexport const Input = styled.input``;\n\nexport const RegisterButton = styled.button``;\n","import { Form, Input, RegisterButton } from './RegisterForm.styled';\nimport { useDispatch } from 'react-redux';\nimport { createNewUser } from 'redux/authOperations';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { useForm } from 'react-hook-form';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const validationSchema = yup.object().shape({\n    name: yup\n      .string()\n      .matches(\n        \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required(),\n    email: yup\n      .string()\n      .matches('[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$', 'Wrong email format')\n      .required(),\n    password: yup\n      .string()\n      .required('No password provided.')\n      .min(8, 'Password is too short - should be 8 chars minimum.'),\n  });\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    // formState: { errors },\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n  });\n\n  const handleFormSubmit = ({ name, email, password }) => {\n    dispatch(createNewUser({ name, email, password }));\n    reset({ name: '', email: '', password: '' });\n  };\n  return (\n    <Form autoComplete=\"off\" onSubmit={handleSubmit(handleFormSubmit)}>\n      <Input type=\"name\" {...register('name')}></Input>\n      <Input type=\"email\" {...register('email')}></Input>\n      <Input type=\"password\" {...register('password')}></Input>\n      <RegisterButton type=\"submit\">Login</RegisterButton>\n    </Form>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nconst Register = () => {\n  return (\n    <>\n      <RegisterForm />\n    </>\n  );\n};\nexport default Register;\n"],"names":["Form","styled","Input","RegisterButton","RegisterForm","dispatch","useDispatch","validationSchema","yup","shape","name","matches","required","email","password","min","useForm","resolver","yupResolver","register","handleSubmit","reset","autoComplete","onSubmit","createNewUser","type"],"sourceRoot":""}