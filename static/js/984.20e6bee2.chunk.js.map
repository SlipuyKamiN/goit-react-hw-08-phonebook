{"version":3,"file":"static/js/984.20e6bee2.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.styled.jsx","components/ContactListItem/ContactListItem.styled.jsx","redux/contactsSelectors.js","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ModalForm/ModalForm.styled.jsx","components/ModalForm/ModalForm.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ContactsList = styled.ul`\n  margin: 0 auto;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  column-gap: 40px;\n  row-gap: 15px;\n  list-style: none;\n  padding: 0;\n`;\n","import styled from '@emotion/styled';\n\nexport const ListItem = styled.li`\n  height: 60px;\n  width: 350px;\n  display: flex;\n\n  padding: 5px 0;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 20px;\n  border-bottom: 1px solid #000000;\n`;\n\nexport const ContactName = styled.p`\n  font-size: 18px;\n  margin-bottom: 5px;\n`;\n\nexport const ContactNumber = styled.a`\n  svg {\n    margin-right: 5px;\n  }\n`;\n\nexport const DeleteButton = styled.button`\n  display: block;\n  width: 50px;\n  height: 50px;\n  border-radius: 4px;\n  border: 2px solid #ffffff;\n  text-transform: uppercase;\n  text-align: center;\n  background-color: transparent;\n  transition: background-color 250ms linear, color 250ms linear;\n  &:hover,\n  &:focus,\n  &:disabled {\n    cursor: pointer;\n    background-color: #00000044;\n    color: #fff;\n  }\n`;\n","export const getContacts = state => state.contacts.contacts;\nexport const getContactsStatus = state => state.contacts.status;\n","import {\n  ListItem,\n  DeleteButton,\n  ContactName,\n  ContactNumber,\n} from './ContactListItem.styled';\nimport { deleteContact } from 'redux/contactsOperations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FaUserGraduate, FaUserTimes } from 'react-icons/fa';\nimport { LuPhoneCall } from 'react-icons/lu';\nimport { LoadingIcon } from 'components/SharedLayout/SharedLayout.styled';\nimport { getContactsStatus } from 'redux/contactsSelectors';\n\nexport const ContactListItem = ({ contact }) => {\n  const contactsStatus = useSelector(getContactsStatus);\n  const dispatch = useDispatch();\n\n  const { id, name, number } = contact;\n\n  return (\n    <ListItem>\n      <FaUserGraduate size=\"40px\" />\n      <div>\n        <ContactName>{name}</ContactName>\n        <ContactNumber href={`tel:${number}}`}>\n          <LuPhoneCall size=\"20px\" />\n          {number}\n        </ContactNumber>\n      </div>\n      <DeleteButton\n        type=\"button\"\n        disabled={contactsStatus === 'pending'}\n        onClick={() => {\n          dispatch(deleteContact({ id }));\n        }}\n      >\n        {contactsStatus === 'pending' ? (\n          <LoadingIcon size=\"32px\" />\n        ) : (\n          <FaUserTimes size=\"20px\" />\n        )}\n      </DeleteButton>\n    </ListItem>\n  );\n};\n","import { useEffect } from 'react';\nimport { ContactsList } from './ContactList.styled';\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchAll } from 'redux/contactsOperations';\nimport { getContacts } from 'redux/contactsSelectors';\nimport { getIsLoggedIn } from 'redux/authSelectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const isLoggedIn = useSelector(getIsLoggedIn);\n  const dispatch = useDispatch();\n  const filterValue = useSelector(({ filter }) => filter);\n\n  useEffect(() => {\n    isLoggedIn && dispatch(fetchAll());\n  }, [dispatch, isLoggedIn]);\n\n  const filteredContacts = (() => {\n    const normalizedFilter = filterValue.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  })();\n\n  return (\n    <ContactsList>\n      {filteredContacts.map(contact => (\n        <ContactListItem key={contact.id} contact={contact} />\n      ))}\n    </ContactsList>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const FilterWrapper = styled.div`\n  max-width: 350px;\n  margin: 0 auto;\n`;\n\nexport const InputWrapper = styled.div`\n  display: flex;\n  gap: 10px;\n  width: 350px;\n  margin-bottom: 25px;\n`;\n\nexport const FilterInput = styled.input`\n  padding: 10px;\n  margin: 0;\n  width: 100%;\n  font-size: 24px;\n  color: #ffffff;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  background-color: #00000044;\n  outline: 3px solid transparent;\n\n  transition: outline 250ms linear;\n\n  &:focus {\n    outline: 3px solid #000000;\n  }\n`;\n\nexport const FilterLabel = styled.label`\n  padding: 0;\n  margin: 0;\n  width: 100%;\n  font-size: 18px;\n  text-transform: uppercase;\n`;\n\nexport const AddContactButton = styled.button`\n  display: block;\n  flex-shrink: 0;\n  width: 50px;\n  height: 50px;\n\n  padding: 10px;\n  border-radius: 4px;\n  border: 2px solid #ffffff;\n  text-transform: uppercase;\n  text-align: center;\n  font-weight: 600;\n  background-color: transparent;\n  transition: background-color 250ms linear, color 250ms linear;\n\n  &:hover,\n  &:focus,\n  &:disabled {\n    cursor: pointer;\n    background-color: #00000044;\n    color: #fff;\n  }\n`;\n","import { nanoid } from 'nanoid';\nimport {\n  InputWrapper,\n  FilterInput,\n  FilterLabel,\n  AddContactButton,\n  FilterWrapper,\n} from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filter } from 'redux/filterSlice';\nimport { FaUserPlus } from 'react-icons/fa';\n\nexport const Filter = ({ toggleModal }) => {\n  const filterId = nanoid();\n  const filterValue = useSelector(({ filter }) => filter);\n  const dispatch = useDispatch();\n\n  return (\n    <FilterWrapper>\n      <FilterLabel htmlFor={filterId}>Filter contacts by name</FilterLabel>\n      <InputWrapper>\n        <FilterInput\n          autoComplete=\"off\"\n          type=\"text\"\n          id={filterId}\n          name=\"filter\"\n          value={filterValue}\n          onChange={e => {\n            dispatch(filter(e.currentTarget.value));\n          }}\n        />\n        <AddContactButton onClick={toggleModal} data-open-modal>\n          <FaUserPlus size=\"20px\" />\n        </AddContactButton>\n      </InputWrapper>\n    </FilterWrapper>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Backdrop = styled.div`\n  position: absolute;\n  z-index: 2;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: #00000066;\n  backdrop-filter: blur(4px);\n  overflow-y: scroll;\n`;\n\nexport const FormWrapper = styled.div`\n  position: absolute;\n  z-index: 3;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: #ffffffcc;\n  box-shadow: #ffffff 0px 0px 20px;\n\n  width: 300px;\n  border-radius: 15px;\n  padding: 15px;\n`;\n\nexport const CloseButton = styled.button`\n  display: block;\n  margin-left: auto;\n  margin-bottom: 10px;\n  width: 25px;\n  height: 25px;\n  border-radius: 50%;\n  border: none;\n  padding: 0;\n  background-color: transparent;\n\n  transition: background-color 250ms linear, color 250ms linear;\n  &:hover,\n  &:focus,\n  &:disabled {\n    cursor: pointer;\n    background-color: #00000044;\n    color: #fff;\n  }\n`;\n\nexport const AppForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n`;\n\nexport const FormTitle = styled.h2`\n  font-size: 18px;\n  font-weight: 400;\n  text-align: center;\n`;\n\nexport const FormInput = styled.input`\n  padding: 10px;\n  margin: 0;\n  width: 100%;\n  font-size: 24px;\n  color: #ffffff;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  background-color: #00000044;\n  outline: 3px solid transparent;\n\n  transition: outline 250ms linear;\n\n  &:focus {\n    outline: 3px solid #000000;\n  }\n`;\n\nexport const FormInputLabel = styled.label`\n  padding: 0;\n  margin: 0;\n  text-transform: capitalize;\n  width: 100%;\n  font-size: 18px;\n`;\n\nexport const ErrMessage = styled.span`\n  max-width: 100%;\n  font-size: 14px;\n  color: red;\n`;\n\nexport const SubmitButton = styled.button`\n  width: 150px;\n  padding: 10px;\n  border-radius: 4px;\n  border: 2px solid #ffffff;\n  text-transform: uppercase;\n  text-align: center;\n  background-color: transparent;\n  transition: background-color 250ms linear, color 250ms linear;\n  &:hover,\n  &:focus,\n  &:disabled {\n    cursor: pointer;\n    background-color: #00000044;\n    color: #fff;\n  }\n`;\n","import {\n  AppForm,\n  FormInput,\n  FormInputLabel,\n  SubmitButton,\n  ErrMessage,\n  Backdrop,\n  FormTitle,\n  FormWrapper,\n  CloseButton,\n} from './ModalForm.styled';\nimport { AiOutlineCloseCircle } from 'react-icons/ai';\nimport { nanoid } from 'nanoid';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { createPortal } from 'react-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contactsOperations';\nimport { useEffect } from 'react';\nimport { LoadingIcon } from 'components/SharedLayout/SharedLayout.styled';\nimport { getContacts, getContactsStatus } from 'redux/contactsSelectors';\nimport { notification } from 'components/SharedLayout/notification';\nimport { STATUS } from 'redux/constants';\nconst { PENDING, FULFILLED } = STATUS;\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const ModalForm = ({ toggleModal }) => {\n  const nameID = nanoid();\n  const numberID = nanoid();\n  const contacts = useSelector(getContacts);\n  const contactsStatus = useSelector(getContactsStatus);\n  const dispatch = useDispatch();\n\n  const validationSchema = yup.object().shape({\n    name: yup\n      .string()\n      .matches(\n        \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required(),\n    number: yup\n      .string()\n      .matches(\n        '^[+]?[(]?[0-9]{1,4}[)]?[-s.]?[0-9]{1,4}[-s.]?[0-9]{1,6}$',\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n      )\n      .required(),\n  });\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n  });\n\n  const handleToggleModal = event => {\n    const isEventModalControlElement =\n      event.currentTarget.dataset?.openModal ||\n      event.target.dataset?.closeModal ||\n      event.target.dataset?.backdrop ||\n      event.code === 'Escape';\n\n    if (isEventModalControlElement) {\n      toggleModal();\n      return;\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleToggleModal);\n    return () => {\n      window.removeEventListener('keydown', handleToggleModal);\n    };\n  });\n\n  const handleFormSubmit = ({ name, number }) => {\n    const normalizedName = name.toLowerCase();\n\n    const isNameAlreadyInContacts = contacts.find(\n      contact => contact.name.toLowerCase() === normalizedName\n    );\n\n    if (isNameAlreadyInContacts) {\n      notification(`\"${name}\" is already in contacts.`);\n      return;\n    }\n\n    if (contactsStatus === FULFILLED) {\n      dispatch(addContact({ name, number }));\n      reset({ name: '', number: '' });\n      toggleModal();\n      notification(`Contact '${name}' has been successfully added.`, 'success');\n    }\n  };\n\n  return createPortal(\n    <Backdrop data-backdrop onClick={handleToggleModal}>\n      <FormWrapper>\n        <CloseButton data-close-modal onClick={handleToggleModal}>\n          <AiOutlineCloseCircle size=\"25px\" data-close-modal />\n        </CloseButton>\n        <AppForm autoComplete=\"off\" onSubmit={handleSubmit(handleFormSubmit)}>\n          <FormTitle>Fill the form below, to add your new contact.</FormTitle>\n          <FormInputLabel htmlFor={nameID}>Name</FormInputLabel>\n          <FormInput type=\"text\" {...register('name')} id={nameID} />\n          {errors.name && <ErrMessage>{errors.name.message}</ErrMessage>}\n          <FormInputLabel htmlFor={numberID}>Number</FormInputLabel>\n          <FormInput type=\"text\" {...register('number')} id={numberID} />\n          {errors.number && <ErrMessage>{errors.number.message}</ErrMessage>}\n          <SubmitButton type=\"submit\" disabled={contactsStatus === PENDING}>\n            {contactsStatus === PENDING ? (\n              <LoadingIcon size=\"32px\" />\n            ) : (\n              'add contact'\n            )}\n          </SubmitButton>\n        </AppForm>\n      </FormWrapper>\n    </Backdrop>,\n    modalRoot\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ContactsWrapper = styled.div`\n  max-width: 100%;\n  margin: 0 auto;\n`;\n","import { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { ModalForm } from 'components/ModalForm/ModalForm';\nimport { useState } from 'react';\nimport { ContactsWrapper } from './Contacts.styled';\n\nconst Contacts = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const toggleModal = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  return (\n    <ContactsWrapper>\n      <Filter toggleModal={toggleModal} />\n      <ContactList />\n      {isModalOpen && <ModalForm toggleModal={toggleModal} />}\n    </ContactsWrapper>\n  );\n};\nexport default Contacts;\n"],"names":["ContactsList","styled","ListItem","ContactName","ContactNumber","DeleteButton","getContacts","state","contacts","getContactsStatus","status","ContactListItem","contact","contactsStatus","useSelector","dispatch","useDispatch","id","name","number","size","href","type","disabled","onClick","deleteContact","ContactList","isLoggedIn","getIsLoggedIn","filterValue","filter","useEffect","fetchAll","filteredContacts","normalizedFilter","toLowerCase","includes","map","FilterWrapper","InputWrapper","FilterInput","FilterLabel","AddContactButton","Filter","toggleModal","filterId","nanoid","htmlFor","autoComplete","value","onChange","e","currentTarget","Backdrop","FormWrapper","CloseButton","AppForm","FormTitle","FormInput","FormInputLabel","ErrMessage","SubmitButton","PENDING","STATUS","FULFILLED","modalRoot","document","querySelector","ModalForm","nameID","numberID","validationSchema","yup","shape","matches","required","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","handleToggleModal","event","dataset","openModal","target","closeModal","backdrop","code","window","addEventListener","removeEventListener","createPortal","onSubmit","normalizedName","find","notification","addContact","message","ContactsWrapper","useState","isModalOpen","setIsModalOpen"],"sourceRoot":""}