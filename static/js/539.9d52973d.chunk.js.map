{"version":3,"file":"static/js/539.9d52973d.chunk.js","mappings":"yOAEaA,EAAcC,EAAAA,EAAAA,IAAH,+KAWXC,EAAUD,EAAAA,EAAAA,KAAH,uIAQPE,EAAYF,EAAAA,EAAAA,GAAH,wFAMTG,EAAYH,EAAAA,EAAAA,MAAH,uUAkBTI,EAAiBJ,EAAAA,EAAAA,MAAH,wHAQdK,EAAaL,EAAAA,EAAAA,KAAH,+EAMVM,EAAeN,EAAAA,EAAAA,OAAH,gY,qEC3CZO,EAAY,WACvB,IAAMC,GAAUC,EAAAA,EAAAA,MACVC,GAAaD,EAAAA,EAAAA,MACbE,GAAWC,EAAAA,EAAAA,eAEXC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,MAAOF,EAAAA,KAEJG,QAAQ,yCAA0C,sBAClDC,WACHC,SAAUL,EAAAA,KAEPI,SAAS,yBACTE,IAAI,EAAG,wDAGZ,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAYV,KALtBW,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACaC,EAJf,EAIEC,UAAaD,OASf,OACE,UAAC5B,EAAD,YACE,SAACG,EAAD,UAAW,mDACX,UAACD,EAAD,CAAS4B,aAAa,MAAMC,SAAUL,GAPjB,SAAC,GAAyB,IAAvBT,EAAsB,EAAtBA,MAAOG,EAAe,EAAfA,SACjCR,GAASoB,EAAAA,EAAAA,IAAM,CAAEf,MAAAA,EAAOG,SAAAA,KACxBO,EAAM,CAAEV,MAAO,GAAIG,SAAU,IAC9B,IAIG,WACE,SAACf,EAAD,CAAgB4B,QAASxB,EAAzB,SAAkC,WAClC,SAACL,GAAD,gBAAW8B,KAAK,SAAYT,EAAS,UAArC,IAA+CU,GAAI1B,KAClDmB,EAAOX,QAAS,SAACX,EAAD,UAAasB,EAAOX,MAAMmB,WAC3C,SAAC/B,EAAD,CAAgB4B,QAAStB,EAAzB,SAAqC,cACrC,SAACP,GAAD,gBACE8B,KAAK,YACDT,EAAS,aAFf,IAGEU,GAAIxB,KAELiB,EAAOR,WAAY,SAACd,EAAD,UAAasB,EAAOR,SAASgB,WACjD,SAAC7B,EAAD,CAAc2B,KAAK,SAAnB,SAA4B,iBAInC,ECtDD,EAPc,WACZ,OACE,+BACE,SAAC1B,EAAD,KAGL,C","sources":["components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/Login/Login.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const FormWrapper = styled.div`\n  margin: 0 auto;\n\n  background-color: #ffffff66;\n  box-shadow: #ffffff 0px 0px 20px;\n\n  width: 300px;\n  border-radius: 15px;\n  padding: 15px;\n`;\n\nexport const AppForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n`;\n\nexport const FormTitle = styled.h2`\n  font-size: 18px;\n  font-weight: 400;\n  text-align: center;\n`;\n\nexport const FormInput = styled.input`\n  padding: 10px;\n  margin: 0;\n  width: 100%;\n  font-size: 24px;\n  color: #ffffff;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  background-color: #00000044;\n  outline: 3px solid transparent;\n\n  transition: outline 250ms linear;\n\n  &:focus {\n    outline: 3px solid #000000;\n  }\n`;\n\nexport const FormInputLabel = styled.label`\n  padding: 0;\n  margin: 0;\n  text-transform: capitalize;\n  width: 100%;\n  font-size: 18px;\n`;\n\nexport const ErrMessage = styled.span`\n  max-width: 100%;\n  font-size: 14px;\n  color: red;\n`;\n\nexport const SubmitButton = styled.button`\n  width: 150px;\n  padding: 10px;\n  border-radius: 4px;\n  border: 2px solid #ffffff;\n  text-transform: uppercase;\n  text-align: center;\n  background-color: transparent;\n  transition: background-color 250ms linear, color 250ms linear;\n  &:hover,\n  &:focus,\n  &:disabled {\n    cursor: pointer;\n    background-color: #00000044;\n    color: #fff;\n  }\n`;\n","import {\n  AppForm,\n  ErrMessage,\n  FormInput,\n  FormInputLabel,\n  FormTitle,\n  FormWrapper,\n  SubmitButton,\n} from './LoginForm.styled';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/authOperations';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { nanoid } from 'nanoid';\n\nexport const LoginForm = () => {\n  const emailID = nanoid();\n  const passwordID = nanoid();\n  const dispatch = useDispatch();\n\n  const validationSchema = yup.object().shape({\n    email: yup\n      .string()\n      .matches('[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$', 'Wrong email format')\n      .required(),\n    password: yup\n      .string()\n      .required('No password provided.')\n      .min(8, 'Password is too short - should be 8 chars minimum.'),\n  });\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n  });\n\n  const handleFormSubmit = ({ email, password }) => {\n    dispatch(logIn({ email, password }));\n    reset({ email: '', password: '' });\n  };\n  return (\n    <FormWrapper>\n      <FormTitle>Registered? Please input your data to sign in</FormTitle>\n      <AppForm autoComplete=\"off\" onSubmit={handleSubmit(handleFormSubmit)}>\n        <FormInputLabel htmlFor={emailID}>Email</FormInputLabel>\n        <FormInput type=\"email\" {...register('email')} id={emailID}></FormInput>\n        {errors.email && <ErrMessage>{errors.email.message}</ErrMessage>}\n        <FormInputLabel htmlFor={passwordID}>Password</FormInputLabel>\n        <FormInput\n          type=\"password\"\n          {...register('password')}\n          id={passwordID}\n        ></FormInput>\n        {errors.password && <ErrMessage>{errors.password.message}</ErrMessage>}\n        <SubmitButton type=\"submit\">sign in</SubmitButton>\n      </AppForm>\n    </FormWrapper>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\n\nconst Login = () => {\n  return (\n    <>\n      <LoginForm />\n    </>\n  );\n};\nexport default Login;\n"],"names":["FormWrapper","styled","AppForm","FormTitle","FormInput","FormInputLabel","ErrMessage","SubmitButton","LoginForm","emailID","nanoid","passwordID","dispatch","useDispatch","validationSchema","yup","shape","email","matches","required","password","min","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","autoComplete","onSubmit","logIn","htmlFor","type","id","message"],"sourceRoot":""}