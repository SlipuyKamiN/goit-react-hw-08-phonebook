{"version":3,"file":"static/js/984.ab5f9906.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.styled.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.jsx","redux/contactsSelectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ModalForm/ModalForm.styled.jsx","components/ModalForm/ModalForm.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ContactsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n`;\n","import styled from '@emotion/styled';\n\nexport const ListItem = styled.li`\n  display: flex;\n  gap: 10px;\n  align-items: center;\n  font-size: 20px;\n`;\n\nexport const DeleteButton = styled.button`\n  cursor: pointer;\n  padding: 5px 10px;\n  border-radius: 15px;\n  border: 1px solid red;\n  background-color: transparent;\n  &:hover,\n  &:focus,\n  &:disabled {\n    color: #fff;\n    background-color: grey;\n  }\n`;\n","import { ListItem, DeleteButton } from './ContactListItem.styled';\nimport { RotatingLines } from 'react-loader-spinner';\n// import { useDeleteContactMutation } from 'redux/contactsSlice';\nimport { deleteContact } from 'redux/contactsOperations';\nimport { useDispatch } from 'react-redux';\n\nexport const ContactListItem = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  const { id, name, number } = contact;\n\n  return (\n    <ListItem>\n      {name}: {number}\n      <DeleteButton\n        type=\"button\"\n        disabled={false}\n        onClick={() => {\n          dispatch(deleteContact({ id }));\n        }}\n      >\n        {false ? <RotatingLines strokeColor=\"white\" width=\"12\" /> : 'Delete'}\n      </DeleteButton>\n    </ListItem>\n  );\n};\n","export const getContacts = state => state.contacts.contacts;\nexport const getContactsStatus = state => state.contacts.status;\n","import { useEffect } from 'react';\nimport { ContactsList } from './ContactList.styled';\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchAll } from 'redux/contactsOperations';\nimport { getContacts } from 'redux/contactsSelectors';\nimport { getIsLoggedIn } from 'redux/authSelectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const isLoggedIn = useSelector(getIsLoggedIn);\n  const dispatch = useDispatch();\n  const filterValue = useSelector(({ filter }) => filter);\n\n  useEffect(() => {\n    isLoggedIn && dispatch(fetchAll());\n  }, [dispatch, isLoggedIn]);\n\n  const filteredContacts = (() => {\n    const normalizedFilter = filterValue.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  })();\n\n  return (\n    <>\n      <ContactsList>\n        {filteredContacts.map(contact => (\n          <ContactListItem key={contact.id} contact={contact} />\n        ))}\n      </ContactsList>\n    </>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const FilterWrapper = styled.div`\n  width: 350px;\n  margin-bottom: 25px;\n`;\n\nexport const FilterInput = styled.input`\n  width: 250px;\n  font-size: 24px;\n`;\n\nexport const FilterLabel = styled.label`\n  text-transform: capitalize;\n  width: 250px;\n  font-size: 24px;\n`;\n","import { nanoid } from 'nanoid';\nimport { FilterWrapper, FilterInput, FilterLabel } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filter } from 'redux/filterSlice';\n\nexport const Filter = () => {\n  const filterId = nanoid();\n  const filterValue = useSelector(({ filter }) => filter);\n  const dispatch = useDispatch();\n\n  return (\n    <FilterWrapper>\n      <FilterLabel htmlFor={filterId}>Find contacts by name</FilterLabel>\n      <FilterInput\n        autoComplete=\"off\"\n        type=\"text\"\n        id={filterId}\n        name=\"filter\"\n        value={filterValue}\n        onChange={e => {\n          dispatch(filter(e.currentTarget.value));\n        }}\n      ></FilterInput>\n    </FilterWrapper>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Backdrop = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: #00000066;\n  backdrop-filter: blur(4px);\n  overflow-y: scroll;\n`;\n\nexport const AppForm = styled.form`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: #ffffff66;\n  box-shadow: #ffffff 0px 0px 20px;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n\n  width: 300px;\n  border-radius: 15px;\n  padding: 15px;\n`;\n\nexport const FormTitle = styled.h2`\n  font-size: 18px;\n  font-weight: 400;\n`;\n\nexport const FormInput = styled.input`\n  padding: 10px;\n  margin: 0;\n  width: 100%;\n  font-size: 24px;\n  color: #ffffff;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  background-color: #00000044;\n  outline: 3px solid transparent;\n\n  transition: outline 250ms linear;\n\n  &:focus {\n    outline: 3px solid #000000;\n  }\n`;\n\nexport const FormInputLabel = styled.label`\n  padding: 0;\n  margin: 0;\n  text-transform: capitalize;\n  width: 100%;\n  font-size: 24px;\n`;\n\nexport const ErrMessage = styled.span`\n  max-width: 100%;\n  font-size: 14px;\n  color: red;\n`;\n\nexport const SubmitButton = styled.button`\n  width: 150px;\n  padding: 10px;\n  border-radius: 4px;\n  border: 2px solid #fed800;\n  text-transform: uppercase;\n  text-align: center;\n  background-color: transparent;\n  transition: background-color 250ms linear, color 250ms linear;\n  &:hover,\n  &:focus,\n  &:disabled {\n    cursor: pointer;\n    background-color: gray;\n    color: #fff;\n  }\n`;\n","import {\n  AppForm,\n  FormInput,\n  FormInputLabel,\n  SubmitButton,\n  ErrMessage,\n  Backdrop,\n  FormTitle,\n} from './ModalForm.styled';\nimport { nanoid } from 'nanoid';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { createPortal } from 'react-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contactsOperations';\nimport { useEffect } from 'react';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const ModalForm = ({ toggleModal }) => {\n  const nameID = nanoid();\n  const numberID = nanoid();\n  const contacts = useSelector(state => state.contacts.contacts);\n  const dispatch = useDispatch();\n\n  const validationSchema = yup.object().shape({\n    name: yup\n      .string()\n      .matches(\n        \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required(),\n    number: yup\n      .string()\n      .matches(\n        '^[+]?[(]?[0-9]{1,4}[)]?[-s.]?[0-9]{1,4}[-s.]?[0-9]{1,6}$',\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n      )\n      .required(),\n  });\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n  });\n\n  const handleToggleModal = event => {\n    const isEventModalControlElement =\n      event.currentTarget.dataset?.openModal ||\n      event.target.dataset?.closeModal ||\n      event.target.dataset?.backdrop ||\n      event.code === 'Escape';\n\n    if (isEventModalControlElement) {\n      toggleModal();\n      return;\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleToggleModal);\n    return () => {\n      window.removeEventListener('keydown', handleToggleModal);\n    };\n  });\n\n  const handleFormSubmit = ({ name, number }) => {\n    const normalizedName = name.toLowerCase();\n\n    const isNameAlreadyInContacts = contacts.find(\n      contact => contact.name.toLowerCase() === normalizedName\n    );\n\n    if (isNameAlreadyInContacts) {\n      // notification(`\"${name}\" is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    reset({ name: '', number: '' });\n    toggleModal();\n  };\n\n  return createPortal(\n    <Backdrop data-backdrop onClick={handleToggleModal}>\n      <div>\n        <button data-close-modal onClick={handleToggleModal}>\n          X\n        </button>\n        <AppForm autoComplete=\"off\" onSubmit={handleSubmit(handleFormSubmit)}>\n          <FormTitle>Fill the form below, to add your new contact.</FormTitle>\n          <FormInputLabel htmlFor={nameID}>Name</FormInputLabel>\n          <FormInput type=\"text\" {...register('name')} id={nameID} />\n          {errors.name && <ErrMessage>{errors.name.message}</ErrMessage>}\n          <FormInputLabel htmlFor={numberID}>Number</FormInputLabel>\n          <FormInput type=\"text\" {...register('number')} id={numberID} />\n          {errors.number && <ErrMessage>{errors.number.message}</ErrMessage>}\n          <SubmitButton type=\"submit\" disabled={false}>\n            {false ? (\n              <RotatingLines strokeColor=\"white\" width=\"12\" />\n            ) : (\n              'Add contact'\n            )}\n          </SubmitButton>\n        </AppForm>\n      </div>\n    </Backdrop>,\n    modalRoot\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const AddContactButton = styled.button`\n  width: 25px;\n  height: 25px;\n  border-radius: 50%;\n  text-align: center;\n`;\n","import { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { ModalForm } from 'components/ModalForm/ModalForm';\nimport { useState } from 'react';\nimport { AddContactButton } from './Contacts.styled';\n\nconst Contacts = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const toggleModal = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  return (\n    <>\n      <AddContactButton onClick={toggleModal} data-open-modal>\n        +\n      </AddContactButton>\n      <Filter />\n      <ContactList />\n      {isModalOpen && <ModalForm toggleModal={toggleModal} />}\n    </>\n  );\n};\nexport default Contacts;\n"],"names":["ContactsList","styled","ListItem","DeleteButton","ContactListItem","contact","dispatch","useDispatch","id","name","number","type","disabled","onClick","deleteContact","getContacts","state","contacts","ContactList","useSelector","isLoggedIn","getIsLoggedIn","filterValue","filter","useEffect","fetchAll","filteredContacts","normalizedFilter","toLowerCase","includes","map","FilterWrapper","FilterInput","FilterLabel","Filter","filterId","nanoid","htmlFor","autoComplete","value","onChange","e","currentTarget","Backdrop","AppForm","FormTitle","FormInput","FormInputLabel","ErrMessage","SubmitButton","modalRoot","document","querySelector","ModalForm","toggleModal","nameID","numberID","validationSchema","yup","shape","matches","required","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","handleToggleModal","event","dataset","openModal","target","closeModal","backdrop","code","window","addEventListener","removeEventListener","createPortal","onSubmit","normalizedName","find","addContact","message","AddContactButton","useState","isModalOpen","setIsModalOpen"],"sourceRoot":""}